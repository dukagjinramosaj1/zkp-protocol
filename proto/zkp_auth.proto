syntax = "proto3";
package zkp_auth;

/*
 * Prover registers on the server by sending:
 * y1 = g^x (mod p)
 * y2 = h^x (mod p),
 * where `x` is the prover's secret value.
 */
message RegisterRequest {
  string user = 1;
  bytes y1 = 2;
  bytes y2 = 3;
}

message RegisterResponse {}

/*
 * Prover asks for a challenge from the server by sending:
 * r1 = g^k (mod p)
 * r2 = h^k (mod p),
 * where `k` is the prover's randomly-chosen param.
 *
 * Verifier responds with the challenge `c`.
 */
message AuthenticationChallengeRequest {
  string user = 1;
  bytes r1 = 2;
  bytes r2 = 3;
}

message AuthenticationChallengeResponse {
  string auth_id = 1;
  bytes c = 2;
}


/*
 * Prover sends the solution to the challenge,
 * `s = k - c * x (mod q)` to the verifier.
 *
 * Verifier responds with the session ID if the solution is correct.
 */

message AuthenticationAnswerRequest {
  string auth_id = 1;
  bytes s = 2;
}

message AuthenticationAnswerResponse {
  string session_id = 1;
}

service Auth {
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  rpc CreateAuthenticationChallenge(AuthenticationChallengeRequest) returns (AuthenticationChallengeResponse) {}
  rpc VerifyAuthentication(AuthenticationAnswerRequest) returns (AuthenticationAnswerResponse) {}
}
